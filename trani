#!/bin/bash

set -e

TRANI_DIR="$HOME/trani"
SESSIONS_DIR="$TRANI_DIR/sessions"
TEMP_DIR="$TRANI_DIR/temp"
PROMPTS_DIR="$TRANI_DIR/prompts"
SESSION_STATE_FILE="$TEMP_DIR/current_session.json"
RECORDING_PID_FILE="$TEMP_DIR/recording_pid"
SINK_MODULE_ID_FILE="$TEMP_DIR/sink_module_id"
LOOP_MIC_MODULE_ID_FILE="$TEMP_DIR/loop_mic_module_id"
LOOP_SYS_MODULE_ID_FILE="$TEMP_DIR/loop_sys_module_id"
DEFAULT_PROMPT_TEMPLATE="default"

ensure_directories_exist() {
    mkdir -p "$SESSIONS_DIR"
    mkdir -p "$TEMP_DIR"
    mkdir -p "$PROMPTS_DIR"
}

is_session_active() {
    [ -f "$SESSION_STATE_FILE" ]
}

get_session_title_from_state() {
    jq -r '.title' "$SESSION_STATE_FILE"
}

get_session_prompt_template_from_state() {
    jq -r '.prompt_template // "default"' "$SESSION_STATE_FILE"
}

get_session_path_from_state() {
    jq -r '.session_path' "$SESSION_STATE_FILE"
}

get_preserve_audio_from_state() {
    jq -r '.preserve_audio // "false"' "$SESSION_STATE_FILE"
}

generate_session_title() {
    local manual_title="$1"
    
    if [ -n "$manual_title" ]; then
        echo "$manual_title"
    else
        echo "sesion_$(date +%H-%M)"
    fi
}

generate_session_directory_name() {
    local title="$1"
    echo "$(date +%Y-%m-%d)-$title"
}

create_session_directory() {
    local session_dir="$1"
    mkdir -p "$session_dir"
}

create_and_open_notes_file() {
    local session_dir="$1"
    local notes_file="$session_dir/notas.md"
    
    touch "$notes_file"
    nvim "$notes_file"
}

save_session_state() {
    local title="$1"
    local session_path="$2"
    local prompt_template="${3:-$DEFAULT_PROMPT_TEMPLATE}"
    local preserve_audio="${4:-false}"

    cat > "$SESSION_STATE_FILE" <<EOF
{
  "active": true,
  "title": "$title",
  "started_at": "$(date -Iseconds)",
  "session_path": "$session_path",
  "prompt_template": "$prompt_template",
  "preserve_audio": "$preserve_audio"
}
EOF
}

setup_audio_virtual_sink() {
    pactl load-module module-null-sink \
        sink_name=trani_mix \
        sink_properties=device.description="Trani_Recording_Mix" \
        > "$SINK_MODULE_ID_FILE"
}

setup_microphone_loopback() {
    pactl load-module module-loopback \
        source=@DEFAULT_SOURCE@ \
        sink=trani_mix \
        latency_msec=1 \
        > "$LOOP_MIC_MODULE_ID_FILE"
}

setup_system_audio_loopback() {
    pactl load-module module-loopback \
        source=@DEFAULT_MONITOR@ \
        sink=trani_mix \
        latency_msec=1 \
        > "$LOOP_SYS_MODULE_ID_FILE"
}

start_audio_recording() {
    pw-record --target trani_mix.monitor \
        --rate 16000 --channels 1 \
        "$TEMP_DIR/recording.wav" &
    
    echo $! > "$RECORDING_PID_FILE"
}

notify_recording_started() {
    local title="$1"
    notify-send "üéôÔ∏è Trani" "Grabaci√≥n iniciada: $title"
}

unload_audio_modules() {
    pactl unload-module "$(cat "$LOOP_SYS_MODULE_ID_FILE")" 2>/dev/null || true
    pactl unload-module "$(cat "$LOOP_MIC_MODULE_ID_FILE")" 2>/dev/null || true
    pactl unload-module "$(cat "$SINK_MODULE_ID_FILE")" 2>/dev/null || true
}

stop_audio_recording() {
    if [ -f "$RECORDING_PID_FILE" ]; then
        kill "$(cat "$RECORDING_PID_FILE")" 2>/dev/null || true
    fi
}

move_recording_to_session() {
    local session_dir="$1"
    mv "$TEMP_DIR/recording.wav" "$session_dir/audio.wav"
}

notify_processing_started() {
    notify-send "‚è∏Ô∏è Trani" "Grabaci√≥n detenida. Procesando..."
}

transcribe_audio_with_whisper() {
    local session_dir="$1"
    
    "$HOME/whisper.cpp/build/bin/whisper-cli" \
        -m "$HOME/whisper.cpp/models/ggml-large-v3-turbo.bin" \
        -f "$session_dir/audio.wav" \
        -l es \
        -t 12 \
        -otxt \
        -of "$session_dir/transcripcion"
}

notes_file_has_content() {
    local notes_file="$1"
    [ -s "$notes_file" ]
}

read_file_content() {
    local file="$1"
    cat "$file"
}

get_prompt_template_path() {
    local template_name="$1"
    local with_notes="$2"
    
    if [ "$with_notes" = "true" ]; then
        echo "$PROMPTS_DIR/${template_name}.txt"
    else
        echo "$PROMPTS_DIR/${template_name}_no_notes.txt"
    fi
}

load_prompt_template() {
    local template_path="$1"
    
    if [ -f "$template_path" ]; then
        cat "$template_path"
    else
        echo ""
    fi
}

fill_prompt_template() {
    local template="$1"
    local transcription="$2"
    local notes="${3:-}"
    
    local filled_prompt="$template"
    filled_prompt="${filled_prompt//\{\{TRANSCRIPTION\}\}/$transcription}"
    filled_prompt="${filled_prompt//\{\{NOTES\}\}/$notes}"
    
    echo "$filled_prompt"
}

generate_prompt_with_notes() {
    local transcription="$1"
    local notes="$2"
    
    cat <<EOF
Tienes una transcripci√≥n de una sesi√≥n y las notas tomadas por el usuario.

TRANSCRIPCI√ìN:
$transcription

NOTAS DEL USUARIO:
$notes

Genera un documento markdown estructurado con:

1. RESUMEN EJECUTIVO (2-3 p√°rrafos)
   - Contexto general de la sesi√≥n
   - Puntos clave discutidos
   - Conclusiones principales

2. DETALLES POR TEMA
   Usa los temas de las notas del usuario como estructura.
   Para cada tema identifica en la transcripci√≥n:
   - Detalles espec√≠ficos mencionados
   - Datos, fechas, n√∫meros relevantes
   - Procesos o procedimientos descritos
   - Decisiones tomadas
   - Contexto adicional importante

3. ACCIONES Y PENDIENTES
   - Action items identificados
   - Responsables (si se mencionan)
   - Fechas l√≠mite (si se mencionan)

4. DATOS IMPORTANTES
   - Fechas clave mencionadas
   - N√∫meros, m√©tricas, estad√≠sticas
   - Nombres de personas referenciadas
   - Documentos, sistemas o herramientas mencionadas

Mant√©n el formato limpio y profesional. Usa encabezados claros.
EOF
}

generate_prompt_without_notes() {
    local transcription="$1"
    
    cat <<EOF
Tienes la transcripci√≥n de una sesi√≥n. Anal√≠zala y genera un documento estructurado.

TRANSCRIPCI√ìN:
$transcription

Genera un documento markdown con:

1. RESUMEN EJECUTIVO (2-3 p√°rrafos)
   - Tema principal de la sesi√≥n
   - Puntos clave discutidos
   - Conclusiones principales

2. TEMAS PRINCIPALES
   Identifica los temas principales discutidos y para cada uno incluye:
   - Contexto y detalles
   - Puntos espec√≠ficos mencionados
   - Decisiones o conclusiones

3. ACCIONES Y PENDIENTES
   - Action items identificados
   - Responsables (si se mencionan)
   - Fechas l√≠mite (si se mencionan)

4. DATOS IMPORTANTES
   - Fechas mencionadas
   - N√∫meros, m√©tricas
   - Nombres de personas
   - Referencias a documentos/sistemas

Mant√©n el formato limpio y profesional.
EOF
}

call_claude_api() {
    local prompt="$1"
    
    curl -s https://api.anthropic.com/v1/messages \
        -H "x-api-key: $ANTHROPIC_API_KEY" \
        -H "anthropic-version: 2023-06-01" \
        -H "content-type: application/json" \
        -d "{
            \"model\": \"claude-sonnet-4-20250514\",
            \"max_tokens\": 4000,
            \"messages\": [{
                \"role\": \"user\",
                \"content\": $(echo "$prompt" | jq -Rs .)
            }]
        }"
}

check_claude_api_error() {
    local response="$1"
    echo "$response" | jq -e '.error' > /dev/null 2>&1
}

get_claude_api_error_message() {
    local response="$1"
    echo "$response" | jq -r '.error.message'
}

extract_text_from_claude_response() {
    local response="$1"
    echo "$response" | jq -r '.content[0].text'
}

generate_summary_with_claude() {
    local session_dir="$1"
    local prompt_template="${2:-$DEFAULT_PROMPT_TEMPLATE}"
    local transcription_file="$session_dir/transcripcion.txt"
    local notes_file="$session_dir/notas.md"
    local summary_file="$session_dir/resumen.md"
    
    local transcription
    transcription=$(read_file_content "$transcription_file")
    
    local has_notes="false"
    local prompt_template_path
    
    if notes_file_has_content "$notes_file"; then
        has_notes="true"
        prompt_template_path=$(get_prompt_template_path "$prompt_template" "true")
    else
        prompt_template_path=$(get_prompt_template_path "$prompt_template" "false")
    fi
    
    local template
    template=$(load_prompt_template "$prompt_template_path")
    
    local prompt
    if [ -n "$template" ]; then
        if [ "$has_notes" = "true" ]; then
            local notes
            notes=$(read_file_content "$notes_file")
            prompt=$(fill_prompt_template "$template" "$transcription" "$notes")
        else
            prompt=$(fill_prompt_template "$template" "$transcription")
        fi
    else
        if [ "$has_notes" = "true" ]; then
            local notes
            notes=$(read_file_content "$notes_file")
            prompt=$(generate_prompt_with_notes "$transcription" "$notes")
        else
            prompt=$(generate_prompt_without_notes "$transcription")
        fi
    fi
    
    local claude_response
    claude_response=$(call_claude_api "$prompt")
    
    if check_claude_api_error "$claude_response"; then
        local error_message
        error_message=$(get_claude_api_error_message "$claude_response")
        echo "Error de Claude API: $error_message" > "$summary_file"
        notify_error "Claude API: $error_message"
        return 1
    fi
    
    local summary
    summary=$(extract_text_from_claude_response "$claude_response")
    
    echo "$summary" > "$summary_file"
}

delete_audio_file() {
    local session_dir="$1"
    local preserve="${2:-false}"
    [ "$preserve" = "false" ] && rm -f "$session_dir/audio.wav"
}

clean_temp_files() {
    rm -f "$RECORDING_PID_FILE"
    rm -f "$SINK_MODULE_ID_FILE"
    rm -f "$LOOP_MIC_MODULE_ID_FILE"
    rm -f "$LOOP_SYS_MODULE_ID_FILE"
    rm -f "$SESSION_STATE_FILE"
}

notify_session_completed() {
    local title="$1"
    local session_path="$2"
    notify-send "‚úÖ Trani" "Sesi√≥n completada: $title\nUbicaci√≥n: $session_path"
}

notify_error() {
    local message="$1"
    notify-send -u critical "‚ùå Trani" "Error: $message"
}

notify_no_active_session() {
    notify-send "‚ö†Ô∏è Trani" "No hay sesi√≥n activa"
}

notify_session_already_active() {
    local title="$1"
    notify-send "‚ö†Ô∏è Trani" "Ya hay una sesi√≥n en curso: $title"
}

start_new_session() {
    local manual_title="$1"
    local prompt_template="${2:-$DEFAULT_PROMPT_TEMPLATE}"
    local preserve_audio="${3:-false}"

    if is_session_active; then
        local current_title
        current_title=$(get_session_title_from_state)
        notify_session_already_active "$current_title"
        exit 1
    fi

    local title
    title=$(generate_session_title "$manual_title")

    local session_dir_name
    session_dir_name=$(generate_session_directory_name "$title")

    local session_path="$SESSIONS_DIR/$session_dir_name"

    create_session_directory "$session_path"
    save_session_state "$title" "$session_path" "$prompt_template" "$preserve_audio"

    setup_audio_virtual_sink
    setup_microphone_loopback
    setup_system_audio_loopback
    start_audio_recording

    notify_recording_started "$title"

    create_and_open_notes_file "$session_path"

    stop_active_session
}

stop_active_session() {
    if ! is_session_active; then
        notify_no_active_session
        exit 1
    fi

    local title
    title=$(get_session_title_from_state)

    local session_path
    session_path=$(get_session_path_from_state)

    local prompt_template
    prompt_template=$(get_session_prompt_template_from_state)

    local preserve_audio
    preserve_audio=$(get_preserve_audio_from_state)

    stop_audio_recording
    unload_audio_modules

    notify_processing_started

    move_recording_to_session "$session_path"
    transcribe_audio_with_whisper "$session_path"

    if generate_summary_with_claude "$session_path" "$prompt_template"; then
        delete_audio_file "$session_path" "$preserve_audio"
        clean_temp_files
        notify_session_completed "$title" "$session_path"
    else
        echo "La sesi√≥n se guard√≥ pero hubo un error al generar el resumen."
        echo "Transcripci√≥n disponible en: $session_path/transcripcion.txt"
        delete_audio_file "$session_path" "$preserve_audio"
        clean_temp_files
    fi
}

toggle_session() {
    local manual_title="$1"
    local prompt_template="$2"
    local preserve_audio="$3"

    if is_session_active; then
        stop_active_session
    else
        start_new_session "$manual_title" "$prompt_template" "$preserve_audio"
    fi
}

show_usage() {
    echo "Uso: trani [comando] [t√≠tulo] [--prompt TEMPLATE] [--preserve-audio]"
    echo ""
    echo "Comandos:"
    echo "  start [t√≠tulo] [--prompt TEMPLATE] [--preserve-audio]   Iniciar sesi√≥n (abre neovim, al cerrar procesa autom√°ticamente)"
    echo "  stop                                                     Detener y procesar sesi√≥n activa manualmente"
    echo "  toggle [t√≠tulo] [--prompt TEMPLATE] [--preserve-audio]  Alternar entre start/stop"
    echo ""
    echo "Opciones:"
    echo "  --prompt TEMPLATE   Usar un prompt personalizado (default: 'default')"
    echo "  --preserve-audio    Mantener archivo de audio despu√©s del procesamiento"
    echo ""
    echo "Ejemplos:"
    echo "  trani start reunion_equipo"
    echo "  trani start brainstorming --prompt brainstorm --preserve-audio"
    echo "  trani toggle sprint_planning --prompt technical"
    echo "  trani stop"
    echo ""
    echo "Prompts disponibles:"
    ls -1 "$PROMPTS_DIR" 2>/dev/null | sed 's/_no_notes\.txt$//' | sed 's/\.txt$//' | sort -u | sed 's/^/  - /'
    echo ""
    echo "Nota: Al usar 'start', la sesi√≥n se procesa autom√°ticamente al cerrar neovim."
}

main() {
    ensure_directories_exist

    local command="${1:-}"
    local title=""
    local prompt_template="$DEFAULT_PROMPT_TEMPLATE"
    local preserve_audio="false"

    shift || true

    while [ $# -gt 0 ]; do
        case "$1" in
            --prompt)
                prompt_template="$2"
                shift 2
                ;;
            --preserve-audio)
                preserve_audio="true"
                shift
                ;;
            *)
                if [ -z "$title" ]; then
                    title="$1"
                fi
                shift
                ;;
        esac
    done

    case "$command" in
        start)
            start_new_session "$title" "$prompt_template" "$preserve_audio"
            ;;
        stop)
            stop_active_session
            ;;
        toggle)
            toggle_session "$title" "$prompt_template" "$preserve_audio"
            ;;
        *)
            show_usage
            exit 1
            ;;
    esac
}

main "$@"
